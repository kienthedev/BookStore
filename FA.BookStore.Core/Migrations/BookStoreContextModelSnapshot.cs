// <auto-generated />
using System;
using FA.BookStore.Core.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FA.BookStore.Core.Migrations
{
    [DbContext(typeof(BookStoreContext))]
    partial class BookStoreContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("FA.BookStore.Core.Models.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookId"), 1L, 1);

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PublisherId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            AuthorId = 1,
                            CategoryId = 1,
                            CreatedDate = new DateTime(2023, 9, 2, 0, 18, 51, 369, DateTimeKind.Local).AddTicks(6212),
                            ImgUrl = "gatsby.jpg",
                            IsActive = true,
                            ModifiedDate = new DateTime(2023, 9, 2, 0, 18, 51, 369, DateTimeKind.Local).AddTicks(6225),
                            Price = 12.99m,
                            PublisherId = 1,
                            Quantity = 20,
                            Summary = "A  classic novel depicting the excesses of the Jazz Age.",
                            Title = "The Great Gatsby"
                        },
                        new
                        {
                            BookId = 2,
                            AuthorId = 2,
                            CategoryId = 1,
                            CreatedDate = new DateTime(2023, 9, 2, 0, 18, 51, 369, DateTimeKind.Local).AddTicks(6228),
                            ImgUrl = "mockingbird.jpg",
                            IsActive = true,
                            ModifiedDate = new DateTime(2023, 9, 2, 0, 18, 51, 369, DateTimeKind.Local).AddTicks(6228),
                            Price = 14.99m,
                            PublisherId = 2,
                            Quantity = 15,
                            Summary = "A story addressing issues of racial injustice and moral growth.",
                            Title = "To Kill a Mockingbird"
                        },
                        new
                        {
                            BookId = 3,
                            AuthorId = 3,
                            CategoryId = 2,
                            CreatedDate = new DateTime(2023, 9, 2, 0, 18, 51, 369, DateTimeKind.Local).AddTicks(6230),
                            ImgUrl = "1984.jpg",
                            IsActive = true,
                            ModifiedDate = new DateTime(2023, 9, 2, 0, 18, 51, 369, DateTimeKind.Local).AddTicks(6230),
                            Price = 10.99m,
                            PublisherId = 3,
                            Quantity = 25,
                            Summary = "A dystopian novel  exploring themes of totalitarianism and surveillance.",
                            Title = "1984"
                        },
                        new
                        {
                            BookId = 4,
                            AuthorId = 4,
                            CategoryId = 3,
                            CreatedDate = new DateTime(2023, 9, 2, 0, 18, 51, 369, DateTimeKind.Local).AddTicks(6232),
                            ImgUrl = "alchemist.jpg",
                            IsActive = true,
                            ModifiedDate = new DateTime(2023, 9, 2, 0, 18, 51, 369, DateTimeKind.Local).AddTicks(6233),
                            Price = 9.99m,
                            PublisherId = 4,
                            Quantity = 30,
                            Summary = "A philosophical novel about a shepherd's journey to find his personal legend.",
                            Title = "The Alchemist"
                        },
                        new
                        {
                            BookId = 5,
                            AuthorId = 5,
                            CategoryId = 4,
                            CreatedDate = new DateTime(2023, 9, 2, 0, 18, 51, 369, DateTimeKind.Local).AddTicks(6234),
                            ImgUrl = "educated.jpg",
                            IsActive = true,
                            ModifiedDate = new DateTime(2023, 9, 2, 0, 18, 51, 369, DateTimeKind.Local).AddTicks(6235),
                            Price = 18.99m,
                            PublisherId = 5,
                            Quantity = 10,
                            Summary = "A memoir   recounting the author's journey from a survivalist family to education.",
                            Title = "Educated"
                        },
                        new
                        {
                            BookId = 6,
                            AuthorId = 6,
                            CategoryId = 2,
                            CreatedDate = new DateTime(2023, 9, 2, 0, 18, 51, 369, DateTimeKind.Local).AddTicks(6236),
                            ImgUrl = "lotr.jpg",
                            IsActive = true,
                            ModifiedDate = new DateTime(2023, 9, 2, 0, 18, 51, 369, DateTimeKind.Local).AddTicks(6237),
                            Price = 29.99m,
                            PublisherId = 1,
                            Quantity = 18,
                            Summary = "Epic fantasy series set in the fictional world of Middle-earth.",
                            Title = "The Lord of the Rings"
                        },
                        new
                        {
                            BookId = 7,
                            AuthorId = 7,
                            CategoryId = 1,
                            CreatedDate = new DateTime(2023, 9, 2, 0, 18, 51, 369, DateTimeKind.Local).AddTicks(6238),
                            ImgUrl = "pride.jpg",
                            IsActive = true,
                            ModifiedDate = new DateTime(2023, 9, 2, 0, 18, 51, 369, DateTimeKind.Local).AddTicks(6239),
                            Price = 11.99m,
                            PublisherId = 2,
                            Quantity = 22,
                            Summary = "Classic romantic novel exploring social issues and manners.",
                            Title = "Pride and Prejudice"
                        },
                        new
                        {
                            BookId = 8,
                            AuthorId = 8,
                            CategoryId = 2,
                            CreatedDate = new DateTime(2023, 9, 2, 0, 18, 51, 369, DateTimeKind.Local).AddTicks(6241),
                            ImgUrl = "harry.jpg",
                            IsActive = true,
                            ModifiedDate = new DateTime(2023, 9, 2, 0, 18, 51, 369, DateTimeKind.Local).AddTicks(6241),
                            Price = 16.99m,
                            PublisherId = 3,
                            Quantity = 28,
                            Summary = "Start of the fantasy series following the journey of a young wizard.",
                            Title = "Harry Potter and the Sorcerer's Stone"
                        },
                        new
                        {
                            BookId = 9,
                            AuthorId = 9,
                            CategoryId = 1,
                            CreatedDate = new DateTime(2023, 9, 2, 0, 18, 51, 369, DateTimeKind.Local).AddTicks(6243),
                            ImgUrl = "catcher.jpg",
                            IsActive = true,
                            ModifiedDate = new DateTime(2023, 9, 2, 0, 18, 51, 369, DateTimeKind.Local).AddTicks(6243),
                            Price = 13.99m,
                            PublisherId = 4,
                            Quantity = 17,
                            Summary = "Coming-of-age novel reflecting on teenage angst and alienation.",
                            Title = "The Catcher in the Rye"
                        },
                        new
                        {
                            BookId = 10,
                            AuthorId = 10,
                            CategoryId = 5,
                            CreatedDate = new DateTime(2023, 9, 2, 0, 18, 51, 369, DateTimeKind.Local).AddTicks(6245),
                            ImgUrl = "leanin.jpg",
                            IsActive = true,
                            ModifiedDate = new DateTime(2023, 9, 2, 0, 18, 51, 369, DateTimeKind.Local).AddTicks(6245),
                            Price = 21.99m,
                            PublisherId = 5,
                            Quantity = 12,
                            Summary = "A book    encouraging women to pursue leadership roles and careers.",
                            Title = "Lean In"
                        },
                        new
                        {
                            BookId = 11,
                            AuthorId = 11,
                            CategoryId = 2,
                            CreatedDate = new DateTime(2023, 9, 2, 0, 18, 51, 369, DateTimeKind.Local).AddTicks(6247),
                            ImgUrl = "hunger.jpg",
                            IsActive = true,
                            ModifiedDate = new DateTime(2023, 9, 2, 0, 18, 51, 369, DateTimeKind.Local).AddTicks(6247),
                            Price = 14.99m,
                            PublisherId = 1,
                            Quantity = 20,
                            Summary = "Dystopian novel about a young girl's fight for survival in a deadly competition.",
                            Title = "The Hunger Games"
                        },
                        new
                        {
                            BookId = 12,
                            AuthorId = 12,
                            CategoryId = 3,
                            CreatedDate = new DateTime(2023, 9, 2, 0, 18, 51, 369, DateTimeKind.Local).AddTicks(6249),
                            ImgUrl = "martian.jpg",
                            IsActive = true,
                            ModifiedDate = new DateTime(2023, 9, 2, 0, 18, 51, 369, DateTimeKind.Local).AddTicks(6250),
                            Price = 17.99m,
                            PublisherId = 2,
                            Quantity = 15,
                            Summary = "Science   fiction novel about an astronaut stranded on Mars.",
                            Title = "The Martian"
                        },
                        new
                        {
                            BookId = 13,
                            AuthorId = 13,
                            CategoryId = 1,
                            CreatedDate = new DateTime(2023, 9, 2, 0, 18, 51, 369, DateTimeKind.Local).AddTicks(6251),
                            ImgUrl = "gone.jpg",
                            IsActive = true,
                            ModifiedDate = new DateTime(2023, 9, 2, 0, 18, 51, 369, DateTimeKind.Local).AddTicks(6252),
                            Price = 13.99m,
                            PublisherId = 3,
                            Quantity = 18,
                            Summary = "Psychological thriller about a woman's mysterious disappearance.",
                            Title = "Gone Girl"
                        },
                        new
                        {
                            BookId = 14,
                            AuthorId = 14,
                            CategoryId = 2,
                            CreatedDate = new DateTime(2023, 9, 2, 0, 18, 51, 369, DateTimeKind.Local).AddTicks(6253),
                            ImgUrl = "davinci.jpg",
                            IsActive = true,
                            ModifiedDate = new DateTime(2023, 9, 2, 0, 18, 51, 369, DateTimeKind.Local).AddTicks(6254),
                            Price = 15.99m,
                            PublisherId = 4,
                            Quantity = 25,
                            Summary = "Mystery thriller involving a murder and a secret society.",
                            Title = "The Da Vinci Code"
                        });
                });

            modelBuilder.Entity("FA.BookStore.Core.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"), 1L, 1);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "Fiction",
                            Description = "Books of imaginative  narration"
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "Science Fiction",
                            Description = "Books with futuristic or speculative themes"
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryName = "Mystery",
                            Description = "Books involving puzzles and suspense"
                        },
                        new
                        {
                            CategoryId = 4,
                            CategoryName = "History",
                            Description = "Books about past events and civilizations"
                        },
                        new
                        {
                            CategoryId = 5,
                            CategoryName = "Self-Help",
                            Description = "Books for personal growth and development"
                        });
                });

            modelBuilder.Entity("FA.BookStore.Core.Models.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"), 1L, 1);

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("CommentId");

                    b.HasIndex("BookId");

                    b.ToTable("Comment");

                    b.HasData(
                        new
                        {
                            CommentId = 1,
                            BookId = 1,
                            Content = "This book is a masterpiece! I couldn't put it down.",
                            CreatedDate = new DateTime(2023, 8, 23, 0, 18, 51, 371, DateTimeKind.Local).AddTicks(30),
                            IsActive = true
                        },
                        new
                        {
                            CommentId = 2,
                            BookId = 1,
                            Content = "I loved the characters and the plot twists. Highly recommended.",
                            CreatedDate = new DateTime(2023, 8, 24, 0, 18, 51, 371, DateTimeKind.Local).AddTicks(41),
                            IsActive = true
                        },
                        new
                        {
                            CommentId = 3,
                            BookId = 2,
                            Content = "A thought-provoking read. It really makes you reflect on life.",
                            CreatedDate = new DateTime(2023, 8, 25, 0, 18, 51, 371, DateTimeKind.Local).AddTicks(42),
                            IsActive = true
                        },
                        new
                        {
                            CommentId = 4,
                            BookId = 2,
                            Content = "The author's writing style is beautiful. I'm a fan!",
                            CreatedDate = new DateTime(2023, 8, 26, 0, 18, 51, 371, DateTimeKind.Local).AddTicks(44),
                            IsActive = true
                        },
                        new
                        {
                            CommentId = 5,
                            BookId = 3,
                            Content = "I couldn't stop reading until the very end. Amazing!",
                            CreatedDate = new DateTime(2023, 8, 27, 0, 18, 51, 371, DateTimeKind.Local).AddTicks(45),
                            IsActive = true
                        },
                        new
                        {
                            CommentId = 6,
                            BookId = 3,
                            Content = "This book taught me so much about history. Engaging storytelling.",
                            CreatedDate = new DateTime(2023, 8, 28, 0, 18, 51, 371, DateTimeKind.Local).AddTicks(47),
                            IsActive = true
                        },
                        new
                        {
                            CommentId = 7,
                            BookId = 4,
                            Content = "The suspense in this book is incredible. Kept me on the edge of my seat.",
                            CreatedDate = new DateTime(2023, 8, 29, 0, 18, 51, 371, DateTimeKind.Local).AddTicks(48),
                            IsActive = true
                        },
                        new
                        {
                            CommentId = 8,
                            BookId = 4,
                            Content = "I'm recommending this book to all my friends. It's a must-read.",
                            CreatedDate = new DateTime(2023, 8, 30, 0, 18, 51, 371, DateTimeKind.Local).AddTicks(50),
                            IsActive = true
                        },
                        new
                        {
                            CommentId = 9,
                            BookId = 5,
                            Content = "This book changed my perspective on life. Profound and touching.",
                            CreatedDate = new DateTime(2023, 8, 31, 0, 18, 51, 371, DateTimeKind.Local).AddTicks(51),
                            IsActive = true
                        },
                        new
                        {
                            CommentId = 10,
                            BookId = 5,
                            Content = "I shed tears while reading this. Beautifully written and emotionally powerful.",
                            CreatedDate = new DateTime(2023, 9, 1, 0, 18, 51, 371, DateTimeKind.Local).AddTicks(52),
                            IsActive = true
                        });
                });

            modelBuilder.Entity("FA.BookStore.Core.Models.Publisher", b =>
                {
                    b.Property<int>("PublisherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PublisherId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PublisherId");

                    b.ToTable("Publishers");

                    b.HasData(
                        new
                        {
                            PublisherId = 1,
                            Description = "One of the world's largest English-language trade book publishers.",
                            Name = "Penguin Random House"
                        },
                        new
                        {
                            PublisherId = 2,
                            Description = "A prominent publishing company with a wide range of titles.",
                            Name = "HarperCollins"
                        },
                        new
                        {
                            PublisherId = 3,
                            Description = "A major American book publishing company.",
                            Name = "Simon & Schuster"
                        },
                        new
                        {
                            PublisherId = 4,
                            Description = "Known for publishing books on technology and programming.",
                            Name = "O'Reilly Media"
                        },
                        new
                        {
                            PublisherId = 5,
                            Description = "Publishes self-help, spiritual, and personal growth books.",
                            Name = "Hay House"
                        });
                });

            modelBuilder.Entity("FA.BookStore.Core.Models.Book", b =>
                {
                    b.HasOne("FA.BookStore.Core.Models.Category", "Category")
                        .WithMany("Books")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FA.BookStore.Core.Models.Publisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("FA.BookStore.Core.Models.Comment", b =>
                {
                    b.HasOne("FA.BookStore.Core.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("FA.BookStore.Core.Models.Category", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("FA.BookStore.Core.Models.Publisher", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
